name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build-binary:
        description: 'Build Binary'
        required: false
        type: boolean
        default: true
      build-docker:
        description: 'Build Docker'
        required: false
        type: boolean
        default: true
      build-deb:
        description: 'Build Debian Packages'
        required: false
        type: boolean
        default: true
      draft-release:
        description: 'Draft Release'
        required: false
        type: boolean
        default: false
      ubuntu-version:
        description: 'Ubuntu Version'
        required: false
        type: choice
        options:
          - '24.04'
          - '22.04'
        default: '24.04'

env:
  DEB_SUPPORTED_TARGETS: x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu

jobs:
  extract-version:
    name: Extract version
    runs-on: warp-ubuntu-latest-x64-16x
    outputs:
      VERSION: ${{ steps.extract_version.outputs.VERSION }}
    steps:
      - name: Extract version
        id: extract_version
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            SHA_SHORT="$(echo ${GITHUB_SHA} | cut -c1-7)"
            BRANCH_NAME_SAFE="${GITHUB_REF_NAME//\//-}"  # replaces "/" in branch name with "-"
            VERSION="${BRANCH_NAME_SAFE}-${SHA_SHORT}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "${VERSION}"

          echo "### Version: \`${VERSION}\`" >> $GITHUB_STEP_SUMMARY
          echo "|                     |                        |" >> $GITHUB_STEP_SUMMARY
          echo "| ------------------- | ---------------------- |" >> $GITHUB_STEP_SUMMARY
          echo "| \`GITHUB_REF_TYPE\` | \`${GITHUB_REF_TYPE}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| \`GITHUB_REF_NAME\` | \`${GITHUB_REF_NAME}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| \`GITHUB_REF\`      | \`${GITHUB_REF}\`      |" >> $GITHUB_STEP_SUMMARY
          echo "| \`GITHUB_SHA\`      | \`${GITHUB_SHA}\`      |" >> $GITHUB_STEP_SUMMARY
          echo "| \`VERSION\`         | \`${VERSION}\`         |" >> $GITHUB_STEP_SUMMARY

  build-binary:
    name: Build binary
    needs: extract-version
    if: ${{ github.event.inputs.build-binary == 'true' || github.event_name == 'push'}} # when manually triggered or version tagged
    runs-on: ${{ matrix.configs.runner }}
    container:
      image: ubuntu:${{ github.event.inputs.ubuntu-version || '24.04' }}
    continue-on-error: ${{ matrix.configs.allow_fail }}
    env:
      VERSION: ${{ needs.extract-version.outputs.VERSION }}
      UBUNTU_VERSION: ${{ github.event.inputs.ubuntu-version || '24.04' }}
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        configs:
          - target: x86_64-unknown-linux-gnu
            runner: warp-ubuntu-latest-x64-16x
            profile: release
            allow_fail: false
          - target: x86_64-unknown-linux-gnu
            runner: warp-ubuntu-latest-x64-16x
            profile: reproducible
            allow_fail: false
          - target: aarch64-unknown-linux-gnu
            runner: warp-ubuntu-latest-x64-16x
            profile: release
            allow_fail: true

    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y \
            build-essential \
            cmake \
            curl \
            git \
            libclang-dev \
            libssl-dev \
            pkg-config \
            protobuf-compiler
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      - uses: actions/checkout@v4 # must install git before checkout and set safe.directory after checkout because of container
        with:
          fetch-depth: 0

      - name: Prepare filename
        run: echo "OUTPUT_FILENAME=rbuilder-operator-${VERSION}-${{ matrix.configs.target }}-${{ matrix.configs.profile }}-ubuntu${UBUNTU_VERSION}" >> $GITHUB_ENV

      - name: Build binary
        run: |
          git config --global --add safe.directory "$(pwd)"
          . $HOME/.cargo/env
          if [[ "${{ matrix.configs.profile }}" == "reproducible" ]]; then
            make build-reproducible TARGET=${{ matrix.configs.target }}
          else
            make build TARGET=${{ matrix.configs.target }} PROFILE=${{ matrix.configs.profile }}
          fi
          ./target/${{ matrix.configs.target }}/${{ matrix.configs.profile }}/rbuilder version

      - name: Build Debian package
        if: ${{ (github.event.inputs.build-deb == 'true' || github.event_name == 'push') && contains(env.DEB_SUPPORTED_TARGETS, matrix.configs.target) }}
        run: make build-deb-${{ matrix.configs.target }} PROFILE=${{ matrix.configs.profile }} VERSION=${{ needs.extract-version.outputs.VERSION }}

      - name: Move artifacts
        run: |
          mkdir artifacts
          # Handle reproducible builds which always target x86_64-unknown-linux-gnu
          if [[ "${{ matrix.configs.profile }}" == "reproducible" ]]; then
            mv "target/x86_64-unknown-linux-gnu/${{ matrix.configs.profile }}/rbuilder" ./artifacts
          else
            mv "target/${{ matrix.configs.target }}/${{ matrix.configs.profile }}/rbuilder" ./artifacts
          fi

          # Move deb packages if they exist
          if [[ "${{ env.DEB_SUPPORTED_TARGETS }}" == *"${{ matrix.configs.target }}"* && -f "target/${{ matrix.configs.target }}/${{ matrix.configs.profile }}/rbuilder-operator-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}-${{ matrix.configs.profile }}.deb" ]]; then
            mv "target/${{ matrix.configs.target }}/${{ matrix.configs.profile }}/rbuilder-operator-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}-${{ matrix.configs.profile }}.deb" ./artifacts
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_FILENAME }}
          path: artifacts/rbuilder

      - name: Upload Debian package
        if: ${{ (github.event.inputs.build-deb == 'true' || github.event_name == 'push') && contains(env.DEB_SUPPORTED_TARGETS, matrix.configs.target) }}
        uses: actions/upload-artifact@v4
        with:
          name: rbuilder-operator-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}-${{ matrix.configs.profile }}.deb
          path: artifacts/rbuilder-operator-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}-${{ matrix.configs.profile }}.deb

  build-docker:
    name: Build and publish Docker image
    if: ${{ github.event.inputs.build-docker == 'true' || github.event_name == 'push'}}
    needs: extract-version
    runs-on: warp-ubuntu-latest-x64-16x
    env:
      VERSION: ${{ needs.extract-version.outputs.VERSION }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          labels: org.opencontainers.image.source=${{ github.repositoryUrl }}
          tags: |
            type=sha
            type=semver,pattern={{version}},value=${{ env.VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION }}
            type=semver,pattern={{major}},value=${{ env.VERSION }}
            type=raw,value=latest,enable=${{ !contains(env.VERSION, '-') }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_PROFILE=release

  draft-release:
    name: Draft release
    if: ${{ github.event.inputs.draft-release == 'true' || github.event_name == 'push'}} # when manually triggered or version tagged
    needs: [extract-version, build-binary]
    runs-on: warp-ubuntu-latest-x64-16x
    env:
      VERSION: ${{ needs.extract-version.outputs.VERSION }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts

      - name: Record artifacts checksums
        working-directory: artifacts
        run: |
          find ./ || true
          for file in *; do sha256sum "$file" >> sha256sums.txt; done;
          cat sha256sums.txt

      - name: Generate release notes with deb packages
        working-directory: artifacts
        run: |
          echo "## Rbuilder Operator Release ${{ env.VERSION }}" > release-notes.md
          echo "" >> release-notes.md
          echo "### Binary Downloads" >> release-notes.md
          echo "" >> release-notes.md
          echo "| Platform | Architecture | Binary | Debian Package |" >> release-notes.md
          echo "|----------|--------------|--------|----------------|" >> release-notes.md

          # List binaries and deb packages
          for binary in rbuilder-operator-*x86_64-unknown-linux-gnu-*-ubuntu*; do
            if [[ -f "$binary" ]]; then
              arch="x86_64"
              if [[ -f "rbuilder-operator-${{ env.VERSION }}-x86_64-unknown-linux-gnu-release.deb" ]]; then
                deb_link="[.deb](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/rbuilder-operator-${{ env.VERSION }}-x86_64-unknown-linux-gnu-release.deb)"
              else
                deb_link="-"
              fi
              echo "| Linux | $arch | [$binary](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/$binary) | $deb_link |" >> release-notes.md
            fi
          done

          for binary in rbuilder-operator-*aarch64-unknown-linux-gnu-*-ubuntu*; do
            if [[ -f "$binary" ]]; then
              arch="aarch64"
              if [[ -f "rbuilder-operator-${{ env.VERSION }}-aarch64-unknown-linux-gnu-release.deb" ]]; then
                deb_link="[.deb](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/rbuilder-operator-${{ env.VERSION }}-aarch64-unknown-linux-gnu-release.deb)"
              else
                deb_link="-"
              fi
              echo "| Linux | $arch | [$binary](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/$binary) | $deb_link |" >> release-notes.md
            fi
          done

          echo "" >> release-notes.md
          echo "### Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo "#### Debian/Ubuntu" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "# Download and install the .deb package" >> release-notes.md
          echo "wget https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/rbuilder-operator-${{ env.VERSION }}-x86_64-unknown-linux-gnu-release.deb" >> release-notes.md
          echo "sudo dpkg -i rbuilder-operator-${{ env.VERSION }}-x86_64-unknown-linux-gnu-release.deb" >> release-notes.md
          echo "" >> release-notes.md
          echo "# Enable and start the service" >> release-notes.md
          echo "sudo systemctl enable rbuilder-operator" >> release-notes.md
          echo "sudo systemctl start rbuilder-operator" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
          echo "" >> release-notes.md
          echo "#### Manual Installation" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "# Download the binary" >> release-notes.md
          echo "wget https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/rbuilder-operator-${{ env.VERSION }}-x86_64-unknown-linux-gnu-release-ubuntu24.04" >> release-notes.md
          echo "chmod +x rbuilder-operator-${{ env.VERSION }}-x86_64-unknown-linux-gnu-release-ubuntu24.04" >> release-notes.md
          echo "sudo mv rbuilder-operator-${{ env.VERSION }}-x86_64-unknown-linux-gnu-release-ubuntu24.04 /usr/local/bin/rbuilder" >> release-notes.md
          echo "\`\`\`" >> release-notes.md

          cat release-notes.md

      - name: Create release draft
        uses: softprops/action-gh-release@v2.0.5
        id: create-release-draft
        with:
          draft: true
          files: artifacts/*
          body_path: artifacts/release-notes.md
          generate_release_notes: true
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}

      - name: Write Github Step Summary
        run: |
          echo "---"
          echo "### Release Draft: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.create-release-draft.outputs.url }}" >> $GITHUB_STEP_SUMMARY
